from time import time

# Problema da Mochila - Guloso - Maior Valor
def get_optimal_value(capacidade, peso, valores):
    capacidadeTotal = 0.
    value = 0.
    numItems = len(valores)
    Items = len(valores)
  
    print "Número de Itens - {:.0f}".format(numItems)
    print "Capacidade da Mochila: - {:.0f}".format(capacidade)

   # Ordenado por Maior Valor e Menor Peso
   #valorProbMochGuloso = sorted([[valores[i], peso[i]] for i in range(numItems)], reverse=True)
    valorProbMochGuloso = sorted([[valores[i], peso[i]] for i in range(numItems)], key=lambda x: (x[0], -x[1]), reverse=True)
    print "Valor - Ordem Decrescente: - {:}".format(valorProbMochGuloso)
    print "---------------------------------------------------------------------------------"

    while capacidade > 0 and numItems > 0:
        idx = 0 # Vaariavel auxiliar (o indice do vetor vai sempre ser o 0)
        # Verifica se o proximo item cabe na mochila (capacidade) 
        if valorProbMochGuloso[idx][1] <= capacidade:
            value += valorProbMochGuloso[idx][0] # Acumulado do valor
            capacidadeTotal += valorProbMochGuloso[idx][1] # Acumulado dos pesos (capacidade alocada)
            capacidade -= valorProbMochGuloso[idx][1] # Decrementa os pesos (capacidade livre da mochila)
        
            print "Item alocado na Mochila: {:}".format((Items - numItems)+1)
            print "Valor alocado do item: {:}".format(valorProbMochGuloso[idx][0])
            print "Valor acumulado na Mochila: {:}".format(value)
            print "Capacidade alocada do item: {:}".format(valorProbMochGuloso[idx][1])
            print "Capacidade acumulada na Mochila: {:}".format(capacidadeTotal)

            MochilaValores.append(valorProbMochGuloso[idx][0])
            MochilaPesos.append(valorProbMochGuloso[idx][1])
            print "---------------------------------------------------------------------------------"
        else:
            numItems = numItems

        valorProbMochGuloso.pop(idx)
        numItems -= 1 # Decrementa o numero de itens
    return value

# Instância de 5
# --------------------------
t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 85
valores = [60, 100, 120, 80, 30]
peso = [20, 50, 30, 10, 40]
opt_value = get_optimal_value(capacidade, peso, valores)
#print("-> Valor Máximo - {:.10f}".format(opt_value))
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)

# Instância de 10
# --------------------------
t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 50
valores  = [3, 1, 8, 7, 1, 6, 1, 11, 6, 2]
peso = [4, 7, 9, 10, 5, 4, 2, 6, 15 , 18]
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)

# Instância de 20
# --------------------------
t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 50
valores = [100, 110, 78, 28, 10, 15, 30, 52, 80, 12, 63, 54, 86, 47, 69, 47, 90, 85, 47, 33]
peso = [8, 7, 9, 8, 6, 7, 11, 14, 9, 3, 4, 12, 15, 5, 8, 9, 4, 15, 14, 1]
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)


# Instância de 30
# --------------------------
t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 120
valores = [100, 110, 78, 28, 10, 15, 30, 52, 80, 12, 63, 54, 86, 47, 69, 47, 90, 85, 47, 33, 100, 110, 78, 28, 10, 15, 30, 52, 80, 12]
peso = [8, 7, 9, 8, 6, 7, 11, 14, 9, 3, 4, 12, 15, 5, 8, 9, 4, 15, 14, 1, 4, 12, 15, 5, 8, 9, 4, 15, 14, 1]
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)

# Instância de 50
# --------------------------
t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 180
valores = [100, 110, 78, 28, 10, 15, 30, 52, 80, 12, 63, 54, 86, 47, 69, 47, 90, 85, 47, 33, 100, 110, 78, 28, 10, 15, 30, 52, 80, 12, 63, 54, 86, 47, 69, 47, 90, 85, 47, 33, 110, 78, 28, 10, 15, 30, 52, 80, 12, 63]
peso = [8, 7, 9, 8, 6, 7, 11, 14, 9, 3, 4, 12, 15, 5, 8, 9, 4, 15, 14, 1, 8, 7, 9, 8, 6, 7, 11, 14, 9, 3, 4, 12, 15, 5, 8, 9, 4, 15, 14, 1, 8, 7, 9, 8, 6, 7, 11, 14, 9, 3]
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)

# Instância de 1000
# --------------------------
t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 500
valores = [114, 121, 140, 128, 128, 107, 144, 117, 104, 110, 120, 137, 129, 131, 132, 122, 145, 137, 147, 144, 150, 141, 120, 139, 119, 101, 136, 138, 144, 147, 140, 107, 119, 131, 134, 147, 138, 128, 113, 141, 139, 135, 128, 118, 115, 111, 141, 112, 147, 137, 105, 146, 127, 126, 137, 148, 126, 122, 135, 119, 120, 126, 127, 139, 107, 113, 135, 144, 142, 149, 136, 130, 133, 115, 149, 150, 126, 140, 113, 124, 128, 117, 122, 105, 143, 110, 102, 120, 133, 138, 141, 103, 113, 117, 143, 121, 131, 129, 114, 122, 127, 150, 104, 112, 116, 102, 113, 141, 141, 125, 117, 119, 143, 140, 125, 137, 101, 128, 107, 133, 117, 149, 135, 131, 115, 127, 102, 146, 105, 117, 119, 134, 116, 122, 147, 134, 124, 109, 126, 116, 135, 142, 136, 127, 133, 110, 114, 133, 139, 122, 116, 105, 120, 102, 136, 136, 129, 139, 133, 135, 105, 102, 120, 123, 125, 116, 106, 150, 126, 131, 116, 110, 125, 103, 139, 107, 115, 104, 142, 103, 125, 107, 110, 146, 108, 147, 131, 138, 135, 114, 125, 139, 117, 144, 111, 141, 112, 116, 141, 139, 149, 108, 149, 123, 112, 139, 129, 126, 142, 120, 129, 118, 128, 140, 113, 138, 136, 145, 125, 120, 108, 101, 110, 126, 147, 121, 119, 108, 138, 109, 146, 136, 118, 146, 110, 129, 134, 139, 107, 127, 110, 137, 144, 140, 126, 108, 127, 111, 103, 103, 132, 112, 104, 141, 138, 150, 111, 106, 109, 101, 116, 104, 138, 135, 102, 148, 115, 135, 136, 121, 114, 147, 107, 107, 136, 132, 117, 114, 144, 119, 117, 125, 130, 120, 116, 117, 119, 128, 124, 127, 130, 139, 132, 118, 123, 133, 115, 138, 120, 102, 108, 133, 148, 117, 141, 136, 150, 107, 149, 146, 127, 115, 120, 107, 136, 137, 125, 106, 117, 149, 134, 146, 137, 116, 113, 112, 150, 127, 149, 121, 130, 108, 103, 130, 126, 146, 115, 126, 104, 115, 121, 131, 132, 142, 137, 119, 131, 111, 125, 147, 111, 108, 144, 148, 125, 107, 111, 127, 135, 111, 147, 117, 118, 102, 146, 146, 149, 112, 123, 102, 126, 145, 132, 109, 138, 120, 128, 118, 133, 104, 116, 143, 113, 110, 142, 138, 118, 102, 116, 104, 112, 112, 120, 132, 115, 115, 129, 113, 126, 101, 115, 104, 145, 148, 114, 132, 120, 143, 102, 102, 146, 117, 146, 109, 128, 138, 148, 145, 141, 113, 101, 103, 126, 120, 136, 143, 137, 114, 105, 112, 116, 121, 117, 110, 121, 133, 143, 140, 125, 144, 143, 121, 113, 138, 131, 140, 125, 128, 137, 118, 142, 137, 120, 119, 106, 107, 113, 142, 122, 120, 106, 137, 140, 124, 146, 112, 106, 140, 103, 133, 136, 145, 105, 148, 135, 135, 139, 109, 114, 125, 128, 107, 111, 147, 127, 119, 105, 140, 112, 126, 109, 119, 112, 150, 143, 109, 112, 150, 101, 114, 132, 136, 111, 138, 133, 145, 122, 121, 105, 137, 148, 133, 143, 110, 131, 120, 128, 138, 111, 142, 113, 119, 110, 127, 118, 104, 137, 131, 106, 137, 147, 137, 124, 107, 127, 108, 103, 148, 131, 107, 135, 128, 141, 129, 137, 122, 150, 117, 109, 110, 108, 123, 128, 117, 149, 148, 121, 138, 128, 126, 126, 126, 114, 150, 132, 140, 107, 134, 140, 137, 143, 126, 114, 133, 104, 103, 106, 106, 119, 116, 115, 126, 139, 145, 142, 139, 142, 114, 126, 121, 141, 104, 147, 107, 103, 130, 146, 111, 116, 137, 148, 108, 112, 113, 142, 118, 115, 150, 123, 135, 115, 139, 110, 103, 133, 104, 144, 124, 117, 121, 147, 110, 124, 143, 116, 126, 122, 113, 137, 137, 150, 136, 146, 113, 148, 140, 132, 115, 139, 106, 149, 103, 145, 111, 108, 127, 114, 101, 103, 132, 121, 149, 141, 145, 141, 108, 122, 114, 121, 110, 103, 122, 145, 148, 136, 145, 137, 118, 111, 125, 123, 111, 130, 117, 121, 137, 146, 136, 137, 148, 118, 109, 146, 110, 103, 136, 118, 127, 101, 140, 136, 103, 111, 133, 101, 146, 129, 139, 115, 139, 116, 140, 101, 145, 106, 122, 133, 103, 109, 121, 150, 126, 129, 145, 136, 134, 132, 105, 112, 133, 144, 147, 137, 106, 131, 139, 103, 109, 128, 118, 149, 145, 107, 102, 139, 114, 123, 123, 117, 131, 143, 118, 109, 123, 113, 146, 106, 146, 102, 117, 130, 145, 116, 117, 102, 148, 105, 104, 109, 134, 121, 107, 128, 129, 110, 118, 145, 132, 140, 113, 115, 134, 130, 125, 107, 144, 122, 114, 142, 123, 131, 121, 117, 148, 139, 118, 145, 146, 123, 103, 129, 144, 112, 109, 124, 121, 126, 120, 105, 118, 132, 121, 101, 114, 147, 107, 109, 118, 121, 150, 140, 103, 123, 106, 102, 113, 125, 146, 110, 147, 101, 139, 142, 114, 149, 118, 134, 124, 137, 140, 143, 121, 110, 144, 136, 108, 102, 144, 125, 122, 146, 114, 126, 120, 121, 127, 134, 145, 123, 144, 144, 125, 134, 137, 138, 132, 104, 123, 107, 143, 113, 150, 113, 124, 143, 148, 132, 144, 143, 106, 118, 138, 120, 143, 109, 140, 120, 143, 137, 144, 136, 132, 120, 119, 118, 107, 150, 124, 129, 108, 116, 143, 107, 130, 117, 149, 127, 150, 145, 121, 105, 112, 109, 126, 106, 119, 118, 127, 111, 106, 120, 146, 139, 141, 116, 106, 147, 117, 131, 128, 125, 148, 120, 133, 127, 138, 132, 105, 137, 128, 126, 144, 141, 136, 119, 146, 104, 138, 123, 117, 143, 144, 114, 131, 135, 130, 139, 133, 148, 119, 110, 122, 117, 132, 105, 145, 119, 138, 150, 106, 117, 125, 149, 107, 112, 117, 104, 115, 107, 128, 133, 149, 124, 147, 132, 110, 126, 122, 142, 123, 142, 104, 147, 110, 135, 103, 105, 103, 142, 106, 108, 108, 130, 108, 116, 143, 127, 119, 109, 133]
peso = [14, 21, 40,28,28,7 ,44,17,4 ,10,20,37,29,31,32,22,45,37,47,44,50,41,20,39,19,1 ,36,38,44,47,40,7 ,19,31,34,47,38,28,13,41,39,35,28,18,15,11,41,12,47,37,5 ,46,27,26,37,48,26,22,35,19,20,26,27,39,7 ,13,35,44,42,49,36,30,33,15,49,50,26,40,13,24,28,17,22,5 ,43,10,2 ,20,33,38,41,3 ,13,17,43,21,31,29,14,22,27,50,4 ,12,16,2 ,13,41,41,25,17,19,43,40,25,37,1 ,28,7 ,33,17,49,35,31,15,27,2 ,46,5 ,17,19,34,16,22,47,34,24,9 ,26,16,35,42,36,27,33,10,14,33,39,22,16,5 ,20,2 ,36,36,29,39,33,35,5 ,2 ,20,23,25,16,6 ,50,26,31,16,10,25,3 ,39,7 ,15,4 ,42,3 ,25,7 ,10,46,8 ,47,31,38,35,14,25,39,17,44,11,41,12,16,41,39,49,8 ,49,23,12,39,29,26,42,20,29,18,28,40,13,38,36,45,25,20,8 ,1 ,10,26,47,21,19,8,38,9 ,46,36,18,46,10,29,34,39,7 ,27,10,37,44,40,26,8 ,27,11,3 ,3 ,32,12,4 ,41,38,50,11,6 ,9 ,1 ,16,4 ,38,35,2 ,48,15,35,36,21,14,47,7 ,7 ,36,32,17,14,44,19,17,25,30,20,16,17,19,28,24,27,30,39,32,18,23,33,15,38,20,2 ,8 ,33,48,17,41,36,50,7 ,49,46,27,15,20,7 ,36,37,25,6 ,17,49,34,46,37,16,13,12,50,27,49,21,30,8 ,3 ,30,26,46,15,26,4 ,15,21,31,32,42,37,19,31,11,25,47,11,8 ,44,48,25,7 ,11,27,35,11,47,17,18,2 ,46,46,49,12,23,2 ,26,45,32,9 ,38,20,28,18,33,4 ,16,43,13,10,42,38,18,2 ,16,4 ,12,12,20,32,15,15,29,13,26,1 ,15,4 ,45,48,14,32,20,43,2 ,2 ,46,17,46,9 ,28,38,48,45,41,13,1 ,3 ,26,20,36,43,37,14,5 ,12,16,21,17,10,21,33,43,40,25,44,43,21,13,38,31,40,25,28,37,18,42,37,20,19,6 ,7 ,13,42,22,20,6 ,37,40,24,46,12,6 ,40,3 ,33,36,45,5 ,48,35,35,39,9 ,14,25,28,7 ,11,47,27,19,5 ,40,12,26,9 ,19,12,50,43,9 ,12,50,1 ,14,32,36,11,38,33,45,22,21,5 ,37,48,33,43,10,31,20,28,38,11,42,13,19,10,27,18,4 ,37,31,6 ,37,47,37,24,7 ,27,8 ,3 ,48,31,7 ,35,28,41,29,37,22,50,17,9 ,10,8 ,23,28,17,49,48,21,38,28,26,26,26,14,50,32,40,7 ,34,40,37,43,26,14,33,4 ,3 ,6 ,6 ,19,16,15,26,39,45,42,39,42,14,26,21,41,4 ,47,7 ,3 ,30,46,11,16,37,48,8 ,12,13,42,18,15,50,23,35,15,39,10,3 ,33,4 ,44,24,17,21,47,10,24,43,16,26,22,13,37,37,50,36,46,13,48,40,32,15,39,6 ,49,3 ,45,11,8 ,27,14,1 ,3 ,32,21,49,41,45,41,8 ,22,14,21,10,3 ,22,45,48,36,45,37,18,11,25,23,11,30,17,21,37,46,36,37,48,18,9 ,46,10,3 ,36,18,27,1 ,40,36,3 ,11,33,1 ,46,29,39,15,39,16,40,1 ,45,6 ,22,33,3 ,9 ,21,50,26,29,45,36,34,32,5 ,12,33,44,47,37,6 ,31,39,3 ,9 ,28,18,49,45,7 ,2 ,39,14,23,23,17,31,43,18,9 ,23,13,46,6 ,46,2 ,17,30,45,16,17,2 ,48,5 ,4 ,9 ,34,21,7 ,28,29,10,18,45,32,40,13,15,34,30,25,7 ,44,22,14,42,23,31,21,17,48,39,18,45,46,23,3 ,29,44,12,9 ,24,21,26,20,5 ,18,32,21,1 ,14,47,7 ,9 ,18,21,50,40,3 ,23,6 ,2 ,13,25,46,10,47,1 ,39,42,14,49,18,34,24,37,40,43,21,10,44,36,8 ,2 ,44,25,22,46,14,26,20,21,27,34,45,23,44,44,25,34,37,38,32,4 ,23,7 ,43,13,50,13,24,43,48,32,44,43,6 ,18,38,20,43,9 ,40,20,43,37,44,36,32,20,19,18,7 ,50,24,29,8 ,16,43,7 ,30,17,49,27,50,45,21,5 ,12,9 ,26,6 ,19,18,27,11,6 ,20,46,39,41,16,6 ,47,17,31,28,25,48,20,33,27,38,32,5 ,37,28,26,44,41,36,19,46,4 ,38,23,17,43,44,14,31,35,30,39,33,48,19,10,22,17,32,5 ,45,19,38,50,6 ,17,25,49,7 ,12,17,4 ,15,7 ,28,33,49,24,47,32,10,26,22,42,23,42,4 ,47,10,35,3 ,5 ,3 ,42,6 ,8 ,8 ,30,8 ,16,43,27,19,9 ,33]
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)

# Instância de 2500
# --------------------------
file = 'KP2500.txt'
data = open(file).read().split('\n')
valores = []
peso = []
for i in range(2, len(data)):
	val = data[i].split(' ')
	valores.append(int(val[0]))
	peso.append(int(val[1]))

t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 295
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)

# Instância de 5000
# --------------------------
file = 'KP5000.txt'
data = open(file).read().split('\n')
valores = []
peso = []
for i in range(2, len(data)):
	val = data[i].split(' ')
	valores.append(int(val[0]))
	peso.append(int(val[1]))

t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 2500
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)

# Instância de 7500
# --------------------------
file = 'KP7500.txt'
data = open(file).read().split('\n')
valores = []
peso = []
for i in range(2, len(data)):
	val = data[i].split(' ')
	valores.append(int(val[0]))
	peso.append(int(val[1]))

t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 3804
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)

# Instância de 10000
# --------------------------
file = 'KP10000.txt'
data = open(file).read().split('\n')
valores = []
peso = []
for i in range(2, len(data)):
	val = data[i].split(' ')
	valores.append(int(val[0]))
	peso.append(int(val[1]))

t0 = time()
MochilaValores = []
MochilaPesos = []
capacidade = 5000
opt_value = get_optimal_value(capacidade, peso, valores)
print "---------------------------------------------------------------------------------"
print "Vetor de Valores da Mochila: {:}".format(MochilaValores)
print "Vetor de Pesos da Mochila: {:}".format(MochilaPesos)
print "Itens Alocados: {:}".format(len(MochilaPesos))
print "---------------------------------------------------------------------------------"
print "Executado em %0.3fs." % (time() - t0)
